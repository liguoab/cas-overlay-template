buildscript {
    repositories {
        mavenLocal()
        jcenter()
        maven { url "https://repo.spring.io/libs-milestone" }
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${project.springBootVersion}"
        classpath "de.undercouch:gradle-download-task:3.4.3" // used to download CAS shell
        classpath "org.apache.ivy:ivy:2.4.0" // used to download CAS shell from snapshot repo
        classpath "gradle.plugin.com.google.cloud.tools:jib-gradle-plugin:0.10.0"
    }
}

repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
    maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
    maven { url "https://build.shibboleth.net/nexus/content/repositories/releases/" }
    maven { url "https://repo.spring.io/milestone/" }
    maven { url "https://oss.jfrog.org/artifactory/oss-snapshot-local" }
}

apply from: "https://dl.bintray.com/scalding/generic/waroverlay.gradle"


apply plugin: "war"
apply plugin: "org.springframework.boot"
apply plugin: "eclipse"
apply plugin: "idea"
apply plugin: "de.undercouch.download"
apply plugin: "com.google.cloud.tools.jib"

def casServerVersion = project.'cas.version'
def casWebApplicationBinaryName = "cas.war"

configurations.all {
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

eclipse {
    classpath {
       downloadSources = true
       downloadJavadoc = true
    }
}

idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}

war {
    includeWarJars = true
    entryCompression = ZipEntryCompression.STORED
}

springBoot {
    mainClassName = "org.apereo.cas.web.CasWebApplication"
}

bootWar {
	if (project.hasProperty("executable")) {
    	launchScript()
	}

	archiveName "${casWebApplicationBinaryName}"
    baseName "cas"

    excludeDevtools = false
}

bootRun {
    sourceResources sourceSets.main
    classpath = sourceSets.main.runtimeClasspath
}

wrapper {
    distributionType = Wrapper.DistributionType.BIN
    gradleVersion = "${project.gradleVersion}"
}

dependencies {
    if (project.hasProperty("external")) {
        compile "org.apereo.cas:cas-server-webapp:${casServerVersion}"
    } else {
        compile "org.apereo.cas:cas-server-webapp${project.appServer}:${casServerVersion}"
    }
    // Other dependencies may be listed here...
    compile "org.apereo.cas:cas-server-support-ldap:${project.'cas.version'}"
}

jib {
    from {
        image = project.baseDockerImage
    }
    to {
        image = "${project.group}/${project.name}"
        /**
         ecr-login: Amazon Elastic Container Registry (ECR)
         gcr: Google Container Registry (GCR)
         osxkeychain: Docker Hub
         */
        credHelper = "osxkeychain"
        /**
        auth {
            username = "*******"
            password = "*******"
        }
        tags = [casServerVersion]
        */
    }
    container {
        useCurrentTimestamp = true
        entrypoint = ['docker/entrypoint.sh']
        ports = ['80', '443', '8080', '8443']
        labels = [version:casServerVersion, name:project.name, group:project.group]
    }
    extraDirectory {
        path = file('src/main/jib')
        permissions = [
            '/docker/entrypoint.sh': '755'
        ]
    }
}

task copyWebAppIntoJib(type: Copy, group: "build") {
    dependsOn build
    from "build/libs/${casWebApplicationBinaryName}"
    into "src/main/jib/docker/cas/war"
}

task copyConfigIntoJib(type: Copy, group: "build") {
    dependsOn build
    from "etc/cas"
    into "src/main/jib/docker/cas"
}

task deleteWebAppFromJib(type: Delete, group: "build") {
    delete "src/main/jib/docker/cas"
}

tasks.findByName("jibDockerBuild")
        .dependsOn(copyWebAppIntoJib, copyConfigIntoJib)
        .finalizedBy(deleteWebAppFromJib)

task explodeWar(type: Copy, group: "build", description: "Explodes the CAS web application archive") {
    dependsOn build
    from zipTree("build/libs/${casWebApplicationBinaryName}")
    into "${buildDir}/cas"
}

task run(group: "build", description: "Run the CAS web application in embedded container mode") {
    dependsOn build
    doLast {
        def casRunArgs = Arrays.asList("-Xmx2048M -XX:+TieredCompilation -XX:TieredStopAtLevel=1".split(" "))
        javaexec {
            main = "-jar"
            jvmArgs = casRunArgs
            args = ["build/libs/${casWebApplicationBinaryName}"]
            logger.info "Started ${commandLine}"
        }
    }
}

task debug(group: "build", description: "Debug the CAS web application in embedded mode on port 5005") {
    dependsOn build
    doLast {
        def casArgs = Arrays.asList("-Xmx2048M".split(" "))
        javaexec {
            main = "-jar"
            jvmArgs = casArgs
            debug = true
            args = ["build/libs/${casWebApplicationBinaryName}"]
            logger.info "Started ${commandLine}"
        }
    }
}

task downloadShell (group: "shell", description: "Download CAS shell jar from snapshot or release maven repo") {
    doFirst {
        mkdir "${project.shellDir}"
    }
    doLast {
        def downloadFile
        if (isRunningCasServerSnapshot(casServerVersion)) {
            def snapshotDir = "https://oss.sonatype.org/content/repositories/snapshots/org/apereo/cas/cas-server-support-shell/${casServerVersion}/"
            def files = new org.apache.ivy.util.url.ApacheURLLister().listFiles(new URL(snapshotDir))
            files = files.sort{it.path}
            files.each {
                if (it.path.endsWith(".jar")) {
                    downloadFile = it
                }
            }
        } else {
            downloadFile = "https://repo1.maven.org/maven2/org/apereo/cas/cas-server-support-shell/${casServerVersion}/cas-server-support-shell-${casServerVersion}.jar"
        }
        println "Downloading file: ${downloadFile}"
        download {
            src downloadFile
            dest new File("${project.shellDir}", "cas-server-support-shell-${casServerVersion}.jar")
            overwrite false
        }
    }
}

task runShell (group: "shell",  description: "Run the CAS shell") {
    dependsOn downloadShell
    doLast {
        def casShellArgs = Arrays.asList("-Xmx1500M".split(" "))
        javaexec {
            main = "-jar"
            jvmArgs = casShellArgs
            standardInput = System.in
            args = ["${project.shellDir}/cas-server-support-shell-${casServerVersion}.jar", "--shell"]
        }
    }
}

task debugShell (group: "shell", description: "Run the CAS shell with debug options, wait for debugger on port 5005") {
    dependsOn downloadShell
    doLast {
        def casArgs = Arrays.asList("-Xmx1500M ".split(" "))
        javaexec {
            main = "-jar"
            jvmArgs = casArgs
            debug = true
            standardInput = System.in
            args = ["${project.shellDir}/cas-server-support-shell-${casServerVersion}.jar", "--shell"]
        }
    }
}

task showConfiguration(group: "build", description: "Show configurations for each dependency, etc") {
    doLast() {
        def cfg = project.hasProperty("configuration") ? project.property("configuration") : "compile"
        configurations.getByName(cfg).each { println it }
    }
}

task allDependenciesInsight(group: "build", type: DependencyInsightReportTask, description: "Produce insight information for all dependencies") {}

task allDependencies(group: "build", type: DependencyReportTask, description: "Display a graph of all project dependencies") {}

task casVersion (group: "build", description: "Display the current CAS version") {
    doFirst { println casServerVersion }
}

def isRunningCasServerSnapshot(casServerVersion) {
    return "${casServerVersion}".contains("-SNAPSHOT")
}
